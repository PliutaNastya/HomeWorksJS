"use strict"

// Задача 01. Заполнить массив нулями, кроме первого и последнего элементов, которые должны быть равны единице.
// const arr = new Array(7).fill(0)
// arr[0] = 1
// arr[arr.length - 1] = 1
// console.log(arr)

//! .at(-1) не работает, потому что возвращает значение, а не ссылку на элемент массива.Метод .at(index) в JavaScript предназначен для получения значения элемента массива по указанному индексу, но он не возвращает ссылку на сам элемент.

// =================================================================

// Задача 02. Заполнить массив нулями и единицами, при этом данные значения чередуются, начиная с нуля.
// const arr = new Array(7).fill(0)
// const newArr = arr.map((el, index) => index % 2 !== 0 ? el = 1 : el) //! будет работать медленнее, так как создает новый масив, а не изменяет существующий
// for (let i = 1; i < arr.length; i+=2) {
// 	arr[i] = 1
// } //! будет работать быстрее, так как не создает новый массив, а изменяет существующий
// console.log(arr)

// =================================================================

// Задача 03. Заполнить массив последовательными нечетными числами, начиная с единицы.
// const arr = []
// for (let i = 0; i < 10; i++) {
// 	arr[i] = 2 * i + 1 //! Формула для расчета нечетного числа
// }
// console.log(arr)

// =================================================================

// Задача 04. Сформировать массив из элементов арифметической прогрессии с заданным первым элементом x и разностью d.
// const arr = []
// const x = 0
// const d = 3
// for (let i = 0; i < 10; i++) {
// 	arr[i] = x + i * d
// }
// // або
// const arr2 = Array.from(arr, (el, index) => el = x + index * d) //! выглядит лучше
// console.log(arr)
// console.log(arr2)

// =================================================================

// Задача 05. Сформировать возрастающий массив из четных чисел.
// const arr = []
// for (let i = 0; i < 10; i++) {
// 	arr[i] = 2 * i
// }
// console.log(arr)

// =================================================================

// Задача 06. Сформировать убывающий массив из чисел, которые делятся на 3.
// const arr = new Array(20)
// const arrLength = arr.length
// for (let i = 0; i < arrLength; i++) {
// 	arr[i] = (arrLength - i) * 3 //! индексы должны возрастать, а числа спадать, поэтому отнимаем (arrLength - i)
// }
// console.log(arr)

// =================================================================

// Задача 07. Создать массив из n первых чисел Фибоначчи.

// const arr = new Array(10)
// const arrLength = arr.length
// arr[0] = 0 //! первый всегда 0
// arr[1] = 1 //! второй всегда 1
// for (let i = 2; i < arrLength; i++) {
// 	arr[i] = arr[i-1] + arr[i-2] //! сумма двух предыдущих
// }
// console.log(arr)

// =================================================================

// Задача 08. Заполнить массив заданной длины различными простыми числами. Натуральное число, большее единицы, называется простым, если оно делится только на себя и на единицу.

// function isPrime(num) {
// 	if (num < 2) return false
// 	for (let i = 2; i*i <= num; i++) {
// 		if(num % i === 0) return false
// 	}
// 	return true
// }

// const arr = []
// let num = 2
// while (arr.length < 45) {
// 	if (isPrime(num)) arr.push(num)
// 	num++
// }

// console.log(arr)

/* Алгоритм проверки числа на простоту: Чтобы проверить, простое ли число, нужно проверить, делится ли оно на какое - либо число от 2 до его квадратного корня.

Почему до квадратного корня ?
	Пусть мы проверяем число num.Если num делится на какое - либо число больше его квадратного корня, то оно обязательно будет делиться и на меньшее число(меньше квадратного корня).Например:

Для числа 36: если оно делится на 6(квадратный корень от 36), то оно делится и на 2(меньшее число).
Таким образом, нам достаточно проверить числа от 2 до sqrt(num)(квадратный корень из num), чтобы узнать, является ли число простым.
*/

// =================================================================

// Задача 09. Создать массив, каждый элемент которого равен квадрату своего номера.
// const arrLength = 10
// const arr = new Array(arrLength)
// for (let i = 0; i < arrLength; i++) {
// 	arr[i] = i**2
// }
// console.log(arr)

// =================================================================

// Задача 10. Создать массив, на четных местах в котором стоят единицы, а на нечетных местах - числа, равные остатку от деления своего номера на 5.

// const arrLength = 10
// const arr = new Array(arrLength)
// for (let i = 0; i < arrLength; i++) {
// 	if (i % 2 == 0) arr[i] = 1
// 	else arr[i] = i % 5
// }
// console.log(arr)

// =================================================================

// Задача 11. Создать массив, состоящий из троек подряд идущих одинаковых элементов.

// const arrLength = 30
// const arr = new Array(arrLength)
// for (let i = 0; i < arrLength; i++) {
// 	arr[i] = Math.floor(i / 3)
// }
// console.log(arr)
//! Используется выражение Math.floor(i / 3), которое делит индекс i на 3 и округляет вниз до ближайшего целого числа. Это позволяет повторить каждое число трижды подряд.

// =================================================================

// Задача 12. Создать массив, который одинаково читается как слева направо, так и справа налево.

// const arr = [1, 2, 3, 4, 5]
// const copyReverseArr = [...arr].slice(0, -1).reverse() //! slice(0,-1) - удаляет последний элемент, чтобы не было дублирования цифры посередине
// const finalArr = [...arr, ...copyReverseArr]
// console.log(finalArr)

// =================================================================

// Задача 13. Сформировать массив из случайных чисел, в которых ровно две единицы, стоящие на случайных позициях.

// const createArr = (numbersElement, min, max) => {
// 	let arr = []
// 	for (let i = 0; i < numbersElement; i++) {
// 		let randomNum = Math.floor(Math.random() * (max - min + 1)) + min
// 		arr.push(randomNum)
// 	}
// 	return arr
// }

// const addOneOnRandomPositions = (arr) => {
// 	let min = 0
// 	let max = arr.length - 1
// 	for (let i = 0; i < 2; i++) {
// 		let randomPos = Math.floor(Math.random() * (max - min + 1)) + min
// 		if (arr[randomPos] !== 1) arr[randomPos] = 1
// 	}
// 	return arr
// }
// const arr = createArr(10, 2, 100)
// console.log(addOneOnRandomPositions(arr))

// =================================================================

// Задача 14. Заполните массив случайным образом нулями и единицами так, чтобы количество единиц было больше количества нулей.

// const createArr = (numbersElement, min, max) => {
// 	let arr = []
// 	for (let i = 0; i < numbersElement; i++) {
// 		let randomNum = Math.floor(Math.random() * (max - min + 1)) + min
// 		arr.push(randomNum)
// 	}

// 	while (arr.filter((el => el === 1)).length <= arr.filter((el => el === 0)).length) {
// 		let minRandom = 0
// 		let maxRandom = arr.length - 1
// 		let randomPos = Math.floor(Math.random() * (maxRandom - minRandom + 1)) + minRandom
// 		if (arr[randomPos] === 0) arr[randomPos] = 1
// 	}
// 	return arr
// }

// const arr = createArr(10, 0, 1)
// console.log(arr)

//! Упрощенный вариант

// const createArr = (numbersElement, min, max) => {
// 	let arr = []
// 	let zeroCount = 0
// 	let oneCount = 0

// 	for (let i = 0; i < numbersElement; i++) {
// 		let randomNum = Math.floor(Math.random() * (max - min + 1)) + min
// 		arr.push(randomNum)

// 		if (!randomNum) zeroCount++
// 		else oneCount++
// 	}

// 	while (oneCount <= zeroCount) {
// 		let randomPos = Math.floor(Math.random() * numbersElement)
// 		if (arr[randomPos] === 0) {
// 			arr[randomPos] = 1
// 			oneCount++
// 			zeroCount--
// 		}
// 	}

// 	return arr
// }

// const arr = createArr(10, 0, 1)
// console.log(arr)

// =================================================================

// Задача 15. Сформировать массив из случайных целых чисел от 0 до 9 , в котором единиц от 3 до 5 и двоек больше троек.

// const createArr = (numbersElement, min, max) => {
// 	let arr = []
// 	let oneCount = 0
// 	let twoCount = 0
// 	let threeCount = 0

// 	for (let i = 0; i < numbersElement; i++) {
// 		let randomNum = Math.floor(Math.random() * (max - min + 1)) + min
// 		arr.push(randomNum)

// 		if (randomNum === 1) oneCount++
// 		if (randomNum === 2) twoCount++
// 		if (randomNum === 3) threeCount++
// 	}

// 	while (oneCount < 3 || oneCount > 5) {
// 		let randomPos = Math.floor(Math.random() * numbersElement)
// 		if (arr[randomPos] !== 1) {
// 			arr[randomPos] = 1
// 			oneCount++
// 		}
// 	}

// 	while (twoCount <= threeCount) {
// 		let randomPos = Math.floor(Math.random() * numbersElement)
// 		if (arr[randomPos] !== 2 && arr[randomPos] !== 1 && arr[randomPos] !== 3) {
// 			arr[randomPos] = 2
// 			twoCount++
// 		}
// 	}

// 	return arr
// }

// const arr = createArr(10, 0, 9)
// console.log(arr)


//! Другой способ
// const createArr = (numbersElement, min, max) => {
// 	let arr = []
// 	let oneCount = Math.floor(Math.random() * 3) + 3 // единиц от 3 до 5
// 	let twoCount = Math.floor(numbersElement / 2)
// 	let threeCount = 0

// 	for (let i = 0; i < oneCount; i++) {
// 		arr.push(1)
// 	}
// 	for (let i = 0; i < twoCount; i++) {
// 		arr.push(2)
// 	}
// 	for (let i = 0; i < threeCount; i++) {
// 		arr.push(3)
// 	}

// 	while (arr.length < numbersElement) {
// 		let randomNum = Math.floor(Math.random() * (max - min + 1)) + min
// 		arr.push(randomNum)
// 	}

// 	// Перемешиваем массив
// 	arr = arr.sort(() => Math.random() - 0.5)
// 	return arr
// }
// const arr = createArr(15, 0, 9)
// console.log(arr)

//! Объяснение:
// Количество единиц(1): Мы случайным образом выбираем количество единиц от 3 до 5.
// Количество двоек(2): Для двоек мы гарантируем, что их будет больше, чем троек, путем начальной установки twoCount в значение, которое больше половины размера массива.
// Заполнение оставшихся позиций: Мы заполняем оставшиеся места случайными числами от 0 до 9.
// Перемешивание массива: Чтобы результат был случайным, используем метод sort с случайной функцией для перемешивания элементов массива.
// Результат выражения Math.random() - 0.5 будет в пределах от - 0.5 до 0.5.Это означает, что функция - сравнитель для.sort() будет иногда возвращать отрицательные значения, а иногда положительные, что заставляет элементы массива перемешиваться случайным образом.
// Почему именно 0.5 ?
// 	Math.random() даёт значения от 0 до 1. Если вы вычитаем 0.5, то создаём симметричный диапазон вокруг нуля:
// Если значение Math.random() близко к 1(например, 0.8), результат будет положительным(например, 0.3).
// Если значение Math.random() близко к 0(например, 0.1), результат будет отрицательным(например, -0.4).
// Таким образом, использование 0.5 гарантирует, что функция - сравнитель будет иногда возвращать отрицательные числа(что укажет.sort(), что первый элемент должен идти до второго), иногда положительные(что наоборот, укажет на необходимость поменять местами элементы), и это приводит к случайной перестановке элементов массива.
// Если бы вы использовали, скажем, 0.2, результат был бы уже не симметричным, и элементы могли бы быть перемешаны не так случайно, как при 0.5.

// =================================================================

// Задача 16. Создайте массив, в котором количество отрицательных чисел равно количеству положительных и положительные числа расположены на случайных местах в массиве.

// const createArr = (numbersElement, minPositive, maxPositive, maxNegative, minNegative) => {
// 	let arr = []
// 	let positiveCount = Math.floor(numbersElement / 2)
// 	let negativeCount = positiveCount

// 	for (let i = 0; i < positiveCount; i++) {
// 		let randomNum = Math.floor(Math.random() * (maxPositive - minPositive + 1)) + minPositive

// 		arr.push(randomNum)
// 	}
// 	for (let i = 0; i < negativeCount; i++) {
// 		let randomNum = Math.floor(Math.random() * (maxNegative - minNegative + 1)) + minNegative

// 		arr.push(randomNum)
// 	}

// 	// Перемешиваем массив
// 	arr = arr.sort(() => Math.random() - 0.5)

// 	return arr
// }

// const arr = createArr(16, 1, 15, -1, -15)

// console.log(arr)

// =================================================================

// Задача 17. Заполните массив случайным образом нулями, единицами и двойками так, чтобы первая двойка в массиве встречалась раньше первой единицы, количество единиц было в точности равно суммарному количеству нулей и двоек.



// =================================================================

// Задача 18. Придумайте правило генерации массива заданной длины. Определите, сгенерирован ли данный массив вашим правилом или нет.

//! =========================Анализ элементов массива===============================

// =================================================================

// Задача 01. Определить, содержит ли массив данное число x
// const arr = [2, 4, 5, 7, 8, 9, 0, 19, 12, 13, 14, 18, 15]
// const x = 4
// const x2 = 1
// const isIncludeX = arr.includes(x)
// console.log(isIncludeX)
// console.log(arr.includes(x2))
// =================================================================

// Задача 02. Найти количество четных чисел в массиве.
// const arr = [2, 4, 5, 7, 8, 9, 0, 19, 12, 13, 14, 18, 15]
// const evenNum = arr.reduce((accum, el) => {
// 	if (el % 2 === 0) accum++
// 	return accum
// }, 0)
// console.log(evenNum)
// //! або
// const evenNumbers = arr.filter(el => el % 2 === 0).length
// console.log(evenNumbers)
// =================================================================

// Задача 03. Найти количество чисел в массиве, которые делятся на 3, но не делятся на 7.
// const arr = [2, 4, 5, 7, 8, 9, 0, 19, 12, 13, 14, 18, 15]
// const count = arr.reduce((accum, el) => {
// 	if (el % 3 === 0 && el % 7 !== 0) accum++
// 	return accum
// }, 0)
// console.log(count)
// =================================================================

// Задача 04. Определите, каких чисел в массиве больше: которые делятся на первый элемент массива или которые делятся на последний элемент массива.
// const arr = [2, 4, 5, 7, 8, 9, 0, 19, 12, 13, 14, 18, 15]
// const count1 = arr.reduce((accum, el, index, arr) => {
// 	if (el % arr[0] === 0) accum++
// 	return accum
// }, 0)
// const count2 = arr.reduce((accum, el, index, arr) => {
// 	if (el % arr[arr.length-1] === 0) accum++
// 	return accum
// }, 0)
// let res = ''
// if (count1 > count2) res = `Більше тих, що діляться на перший елемент масиву - ${count1}`
// else if (count1 < count2) res = `Більше тих, що діляться на останній елемент масиву - ${count2}`
// else res = 'Таких чисел порівно'

// console.log(res)
// =================================================================

// Задача 05. Найдите сумму и произведение элементов массива.
// const arr = [2, 4, 5]
// const sum = arr.reduce((accum, el) => accum + el, 0)
// const product = arr.reduce((accum, el) => accum * el, 1)
// console.log(sum, product)
// =================================================================

// Задача 06. Найдите сумму четных чисел массива.
// const arr = [2, 4, 5, 7, 8, 9, 0, 19, 12, 13, 14, 18, 15]
// const sum = arr.reduce((accum, el) => {
// 	if (el % 2 === 0) accum += el
// 	return accum
// }, 0)
// console.log(sum)
// =================================================================

// Задача 07. Найдите сумму нечетных чисел массива, которые не превосходят 11.
// const arr = [2, 4, 5, 7, 8, 9, 0, 19, 12, 13, 14, 18, 15]
// const sum = arr.reduce((accum, el) => {
// 	if (el % 2 !== 0 && el <= 11) accum += el
// 	return accum
// }, 0)
// console.log(sum)
// =================================================================

// Задача 08. Найдите сумму чисел массива, которые расположены до первого четного числа массива. Если четных чисел в массиве нет, то найти сумму всех чисел за исключением крайних.
// const arr = [3, 5, 5, 7, 8, 9, 0, 19, 12, 13, 14, 18, 15]
// let sum = 0
// let isEvenNumInArr = false
// for (let el of arr) {
// 	if (el % 2 === 0) {
// 		isEvenNumInArr = true
// 		break
// 	}
// }
// if (isEvenNumInArr) {
// 	// Если есть четные числа, суммируем элементы до первого четного числа
// 	for (let el of arr) {
// 		if (el % 2 === 0) break // Прерываем, как только встречаем первое четное число
// 		sum += el
// 	}
// }
// if (!isEvenNumInArr) {
// 	// Если нет четных чисел, исключаем первый и последний элемент и суммируем оставшиеся
// 	sum = arr.slice(1, arr.length-1).reduce((accum, el) => accum + el, 0)
// }
// console.log(sum)
// =================================================================

// Задача 09. Найдите сумму чисел массива, которые стоят на четных местах.
// const arr = [2, 4, 5, 7, 8, 9, 0, 19, 12, 13, 14, 18, 15]
// const sum = arr.reduce((accum, el, index, arr) => {
// 	if (index % 2 === 0) accum += el
// 	return accum
// }, 0)
// console.log(sum)
// =================================================================

// Задача 10. Найдите сумму чисел массива, которые стоят на нечетных местах и при этом превосходят сумму крайних элементов массива.
// const arr = [2, 4, 5, 7, 8, 9, 0, 19, 12, 13, 14, 18, 15]
// const sum = arr.reduce((accum, el, index, arr) => {
// 	if (index % 2 !== 0 && el > (arr[0] + arr[arr.length - 1])) accum += el
// 	return accum
// }, 0)
// console.log(sum)
// =================================================================

// Задача 11. Дан массив x из n элементов. Найдите x1−x2+x3−…−xn−1+xn.
// const arr = [2, 4, 5, 7, 8, 9, 0, 19, 12, 13, 14, 18, 15]
// // Нужно пройти по каждому элементу массива
// // Если индекс элемента нечетный, прибавлять его к общей сумме.
// // Если индекс элемента четный, вычитать его из общей суммы.
// const res = arr.reduce((accum, el, index, arr) => {
// 	if (index % 2 === 0) accum += el
// 	else accum -= el
// 	return accum
// }, 0)
// console.log(res)
// =================================================================

// Задача 12. Дан массив x из n элементов. Найдите x1xn+x2xn−1+…+xnx1.
// const arr = [2, 4, 5, 7, 8, 9, 0, 19, 12, 13, 14, 18, 15]

// const res = arr.reduce((accum, el, index, arr) => accum += el * arr[arr.length - 1 - index], 0) //! arr[arr.length - 1 - index] - получаем элемент с конца
// console.log(res)
// =================================================================

// Задача 13. Дан массив x из n элементов. Найдите xn(xn+xn−1)(xn+xn−1+xn−2)…(xn+…+x1).
// const arr = [2, 1, 1, 2, 1]
// const res = arr.reverse().reduce((accum, el, index, arr) => {
// 	let sum = 0
// 	for (let i = 0; i <= index; i++) {
// 		sum += arr[i]
// 	}
// 	return accum *= sum
// }, 1)
// console.log(res)
// =================================================================

// Задача 14. Найти наибольший элемент массива.
// const arr = [2, 4, 5, 7, 8, 9, 0, 19, 12, 13, 14, 18, 15]
// const max = Math.max(...arr)
// console.log(max)

// =================================================================

// Задача 15. Найдите сумму наибольшего и наименьшего элементов массива.

// =================================================================

// Задача 16. Найдите количество элементов массива, которые отличны от наибольшего элемента не более чем на 10%.

// =================================================================

// Задача 17. Найдите наименьший четный элемент массива.

// =================================================================

// Задача 18. Среди элементов с нечетными номерами найдите наибольший элемент массива, который делится на 3.

// =================================================================

// Задача 19. Дан массив и число p. Найдите два различных числа в массиве, сумма которых наиболее близка к p.

// =================================================================

// Задача 20. Дан массив. Найдите два соседних элемента, сумма которых минимальна.

// =================================================================

// Задача 21. Дан массив. Найдите три последовательных элемента в массиве, сумма которых максимальна.

// =================================================================

// Задача 22. В данном массиве найдите количество чисел, соседи у которых отличаются более чем в 2 раза.

// =================================================================

// Задача 23. Найдите количество чисел, каждое из которых равно сумме квадратов своих соседей и при этом не является наибольшим в массиве.

// =================================================================

// Задача 24. Проверьте, содержит ли данный массив из n чисел, все числа от 1 до n.

// =================================================================

// Задача 25. Проверьте, образует ли элементы массива в данном порядке арифметическую или геометрическую прогрессии.

// =================================================================

// Задача 26. Проверьте, является ли данный массив возрастающим или убывающим.

// =================================================================

// Задача 27. Найдите количество различных элементов данного массива.

// =================================================================

// Задача 28. Определите количество перемен знаков элементов массива.

// =================================================================

// Задача 29. В данном массиве найти максимальное количество одинаковых элементов.

// =================================================================

// Задача 30. Найти наиболее часто встречающийся элемент в массиве целых чисел.

// =================================================================

// Задача 31. В одномерном массиве, состоящем из n вещественных элементов, вычислите номер минимального элемента массива и сумму элементов массива, расположенных между первым и вторым отрицательными элементами.

// =================================================================

// Задача 32. Напишите программу, которая вводит с клавиатуры непустой массив целых чисел, и выводит число локальных максимумов (элемент является локальным максимумом, если он не имеет соседей, больших, чем он сам).

// =================================================================

// Задача 33. В данном массиве найдите два наименьших элемента.

// =================================================================

// Задача 34. Определите, есть ли в массиве повторяющиеся элементы.

// =================================================================

// Задача 35. В данном массиве найдите наибольшую серию подряд идущих элементов, расположенных по возрастанию.

// =================================================================

// Задача 36. В массиве найдите количество серий из четверок подряд идущих попарно различных элементов.

// =================================================================

// Задача 37. Определите, можно ли вычеркнуть из данного массива одно число так, чтобы оставшиеся числа оказались упорядоченными по возрастанию.

//! ==========================Преобразование массива=================================================








