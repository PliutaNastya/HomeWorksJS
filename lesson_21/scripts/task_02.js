"use strict"

// –ó–∞–¥–∞—á–∞ 02. –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞—Å Client
// –í–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ
	// ID
	// –ü–Ü–ë
	// –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–æ—à–µ–π –Ω–∞ —Ä–∞—Ö—É–Ω–∫—É
// –ú–µ—Ç–æ–¥–∏
	// –î–æ–¥–∞–≤–∞–Ω–Ω—è –≥—Ä–æ—à–µ–π
	// –ó–Ω—è—Ç—Ç—è –≥—Ä–æ—à–µ–π
	// ToString
	// –ù–∞ –æ—Å–Ω–æ–≤—ñ —Ü—å–æ–≥–æ –∫–ª–∞—Å—É —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞—Å GoldenClient
// –í–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ
	// ID
	// –ü–Ü–ë
	// –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–æ—à–µ–π –Ω–∞ —Ä–∞—Ö—É–Ω–∫—É
	// –õ—ñ–º—ñ—Ç –∫—Ä–µ–¥–∏—Ç–Ω–∏—Ö –∫–æ—à—Ç—ñ–≤
	// –í—ñ–¥—Å–æ—Ç–æ–∫ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫—Ä–µ–¥–∏—Ç–Ω–∏—Ö –∫–æ—à—Ç—ñ–≤
// –ú–µ—Ç–æ–¥–∏
	// –î–æ–¥–∞–≤–∞–Ω–Ω—è –≥—Ä–æ—à–µ–π
	// –ó–Ω—è—Ç—Ç—è –≥—Ä–æ—à–µ–π
	// –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ–Ω—ñ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫—Ä–µ–¥–∏—Ç–Ω–∏—Ö –∫–æ—à—Ç—ñ–≤
	// ToString

class Validator {
	static validateString(value, message) {
		if (!value || typeof value !== 'string') throw new TypeError(message)
	}

	static validateNumber(value, message) {
		if (!isFinite(value) || isNaN(value) || typeof value !== "number") throw new Error(message)
	}
}

class Client {
	#id
	#fullName
	#balance
	constructor(id, fullName, balance) {
		this.id = id
		this.fullName = fullName
		this.balance = balance
	}
	get id() {
		return this.#id
	}
	set id(newId) {
		Validator.validateNumber(newId, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è id")
		this.#id = newId
	}

	get fullName() {
		return this.#fullName
	}
	set fullName(newFullName) {
		Validator.validateString(newFullName, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –ü–Ü–ë")
		this.#fullName = newFullName
	}

	get balance() {
		return this.#balance
	}
	set balance(newBalance) {
		Validator.validateNumber(newBalance, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –±–∞–ª–∞–Ω—Å —Ä–∞—Ö—É–Ω–∫—É")
		this.#balance = newBalance
	}

	addMoney(moneyAmount) {
		return this.balance += moneyAmount
	}

	removeMoney(moneyAmount) {
		return this.balance -= moneyAmount
	}

	toString() {
		return `–ù–∞ –±–∞–ª–∞–Ω—Å—ñ —É –≤–∞—Å - ${this.balance} –≥—Ä–Ω`
	}
}

class GoldenClient extends Client {
	#creditLimit
	#creditPercent
	constructor(id, fullName, balance, creditLimit, creditPercent) {
		super(id, fullName, balance)
		this.creditLimit = creditLimit
		this.creditPercent = creditPercent
	}

	get creditLimit() {
		return this.#creditLimit
	}
	set creditLimit(newCreditLimit) {
		Validator.validateNumber(newCreditLimit, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –∫—Ä–µ–¥–∏—Ç–Ω–∏–π –ª—ñ–º—ñ—Ç")
		this.#creditLimit = newCreditLimit
	}

	get creditPercent() {
		return this.#creditPercent
	}
	set creditPercent(newCreditPercent) {
		Validator.validateNumber(newCreditPercent, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –∫—Ä–µ–¥–∏—Ç–Ω–∏–π –ª—ñ–º—ñ—Ç")
		this.#creditPercent = newCreditPercent
	}

	removeMoney(moneyAmount) {
		const availableMoneyAmount = this.balance + this.creditLimit
		if (moneyAmount <= availableMoneyAmount) {
			this.balance -= moneyAmount
			return this.balance
		} else throw new Error("–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–Ω—è—Ç–∏ –±—ñ–ª—å—à–µ –Ω—ñ–∂ –¥–æ–∑–≤–æ–ª–µ–Ω–æ –∫—Ä–µ–¥–∏—Ç–Ω–∏–º –ª—ñ–º—ñ—Ç–æ–º.")
		
	}

	getCreditPenalty() {
		let penalty = 0
		if (this.balance < 0) {
			const userCredit = Math.abs(this.balance)
			penalty = userCredit * (this.#creditPercent / 100)
		}
		return penalty
	}
}

try {
	const c = new Client(1, '–ü–ª—é—Ç–∞ –ê–ª—ñ—Å–∞ –ö–æ—Å—Ç—è–Ω—Ç–∏–Ω—ñ–≤–Ω–∞', 56000)
	console.log(c.toString())

	c.addMoney(5600)
	console.log(c.toString())

	c.removeMoney(61606)
	console.log(c.toString())

	const c1 = new GoldenClient(1, '–ü–ª—é—Ç–∞ –ê–ª—ñ—Å–∞ –ö–æ—Å—Ç—è–Ω—Ç–∏–Ω—ñ–≤–Ω–∞', 56000, 4000, 4)
	console.log(c1.toString())
	c1.removeMoney(60000)
	console.log(c1.toString())
	console.log(c1.getCreditPenalty())
	c1.removeMoney(3000)
	console.log(c1.getCreditPenalty())
} catch (error) {
	console.log(error)
}

// –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —á–∞—Ç–æ–º GPT (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è —Å–µ–±–µ)
try {
	console.log("=== –¢–µ—Å—Ç –∫–ª–∞—Å—É Client ===")
	const client = new Client(1, "–Ü–≤–∞–Ω–µ–Ω–∫–æ –ú–∞—Ä—ñ—è", 10000)
	console.log("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞:", client.fullName)
	console.log("üí∞ –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å:", client.balance)

	client.addMoney(5000)
	console.log("üí≥ –ü—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è 5000 –≥—Ä–Ω:", client.balance)

	client.removeMoney(3000)
	console.log("üí∏ –ü—ñ—Å–ª—è –∑–Ω—è—Ç—Ç—è 3000 –≥—Ä–Ω:", client.balance)

	console.log("‚ÑπÔ∏è ToString:", client.toString())

	console.log("\n=== –¢–µ—Å—Ç –∫–ª–∞—Å—É GoldenClient ===")
	const golden = new GoldenClient(2, "–ü–µ—Ç—Ä–µ–Ω–∫–æ –Ü–≥–æ—Ä", 10000, 2000, 5)
	console.log("üåü –°—Ç–≤–æ—Ä–µ–Ω–æ GoldenClient:", golden.fullName)
	console.log("üí∞ –ë–∞–ª–∞–Ω—Å:", golden.balance)
	console.log("üí≥ –ö—Ä–µ–¥–∏—Ç–Ω–∏–π –ª—ñ–º—ñ—Ç:", golden.creditLimit)
	console.log("üìà –í—ñ–¥—Å–æ—Ç–æ–∫ –∑–∞ –∫—Ä–µ–¥–∏—Ç:", golden.creditPercent + "%")

	golden.removeMoney(11000)
	console.log("üí∏ –ü—ñ—Å–ª—è –∑–Ω—è—Ç—Ç—è 11000 –≥—Ä–Ω (–≤ –∫—Ä–µ–¥–∏—Ç):", golden.balance)
	console.log("‚ö†Ô∏è –ü–µ–Ω—è –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫—Ä–µ–¥–∏—Ç—É:", golden.getCreditPenalty())

	// –ü—Ä–æ–±–∞ –ø–µ—Ä–µ–≤–∏—â–∏—Ç–∏ –∫—Ä–µ–¥–∏—Ç–Ω–∏–π –ª—ñ–º—ñ—Ç
	try {
		golden.removeMoney(2000)
	} catch (e) {
		console.log("‚ùå –°–ø—Ä–æ–±–∞ –ø–µ—Ä–µ–≤–∏—â–∏—Ç–∏ –ª—ñ–º—ñ—Ç:", e.message)
	}

	console.log("‚ÑπÔ∏è ToString:", golden.toString())
	console.log("‚úÖ –ü–æ—Ç–æ—á–Ω–∞ –ø–µ–Ω—è:", golden.getCreditPenalty())

} catch (error) {
	console.log("‚ùå –ü–æ–º–∏–ª–∫–∞:", error.message)
}
