"use strict"

// –ó–∞–¥–∞—á–∞ 03. –ó–∞–¥–∞—á–∞ 3. –û–±‚Äô—î–∫—Ç ‚Äú–§—ñ—Ä–º–∞‚Äù (–≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —á–ª–µ–Ω–∏-–∫–ª–∞—Å–∏)
// –ø–æ–ª—è
// –Ω–∞–∑–≤–∞ —Ñ—ñ—Ä–º–∏;
// –¥–∞—Ç–∞ –∑–∞—Å–Ω—É–≤–∞–Ω–Ω—è(—Ä—ñ–∫, –º—ñ—Å—è—Ü—å);
// –ø–æ—Å–ª—É–≥–∏(–Ω–∞–∑–≤–∞ –ø–æ—Å–ª—É–≥–∏, –≤–∞—Ä—Ç—ñ—Å—Ç—å, —Ç–µ—Ä–º—ñ–Ω –≤–∏–∫–æ–Ω–∞–Ω–Ω—è);
// –∞–¥—Ä–µ—Å–∏ —Ñ—ñ–ª—ñ–∞–ª—ñ–≤(–∫—Ä–∞—ó–Ω–∞, –º—ñ—Å—Ç–æ, –≤—É–ª–∏—Ü—è, –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É);
// –º–µ—Ç–æ–¥–∏
// –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä–æ–∫—ñ–≤ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ñ—ñ—Ä–º–∏;
// –≤–∏–≤–µ–¥–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ñ—ñ–ª—ñ–∞–ª—ñ–≤ —Ñ—ñ—Ä–º–∏ —É –≤–∫–∞–∑–∞–Ω–æ–º—É –º—ñ—Å—Ç—ñ;
// –≤–∏–≤–µ–¥–µ–Ω–Ω—è –Ω–∞ –µ–∫—Ä–∞–Ω –ø–æ—Å–ª—É–≥, —â–æ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞ –≤–∫–∞–∑–∞–Ω—É —Å—É–º—É –≥—Ä–æ—à–µ–π —Ç–∞ –≤–∫–∞–∑–∞–Ω–∏–π —Ç–µ—Ä–º—ñ–Ω —á–∞—Å—É;

function checkNaturalNumber(value, message) {
	if (value <= 0 || isNaN(value) || typeof (value) !== "number") throw new Error(message)
}

class FoundationDate {
	#year
	#month
	constructor(year, month) {
		this.Year = year
		this.Month = month
	}

	get Year() {
		return this.#year
	}
	set Year(newYear) {
		checkNaturalNumber(newYear, "–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ä—ñ–∫ –∑–∞—Å–Ω—É–≤–∞–Ω–Ω—è")
		this.#year = newYear
	}
	get Month() {
		return this.#month
	}
	set Month(newMonth) {
		if (newMonth < 1 || newMonth > 12 || isNaN(newMonth) || typeof (newMonth) !== "number") throw new Error("–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –º—ñ—Å—è—Ü—å –∑–∞—Å–Ω—É–≤–∞–Ω–Ω—è")
		this.#month = newMonth
	}
	toString() {
		return `–î–∞—Ç–∞ –∑–∞—Å–Ω—É–≤–∞–Ω–Ω—è - ${String(this.Month).padStart(2, "0")}.${this.Year}`
	}
}

class Service {
	#name
	#price
	#deadline
	constructor(name, price, deadline) {
		this.Name = name
		this.Price = price
		this.Deadline = deadline
	}
	get Name() {
		return this.#name
	}
	set Name(newName) {
		if (!newName) throw new Error("–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—É –Ω–∞–∑–≤—É –ø–æ—Å–ª—É–≥–∏")
		this.#name = newName
	}
	get Price() {
		return this.#price
	}
	set Price(newPrice) {
		checkNaturalNumber(newPrice, "–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—É —Ü—ñ–Ω—É –ø–æ—Å–ª—É–≥–∏")
		this.#price = newPrice
	}
	get Deadline() {
		return this.#deadline
	}
	set Deadline(newDeadline) {
		checkNaturalNumber(newDeadline, "–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ç–µ—Ä–º—ñ–Ω –≤–∏–∫–æ–Ω–∞–Ω–Ω—è")
		this.#deadline = newDeadline
	}
	toString() {
		return `–ü–æ—Å–ª—É–≥–∞ - ${this.Name}; –¶—ñ–Ω–∞ - ${this.Price}; –¢–µ—Ä–º—ñ–Ω –≤–∏–∫–æ–Ω–∞–Ω–Ω—è - ${this.Deadline} <br>`
	}
}

class BranchAddress {
	#country
	#city
	#street
	#houseNumber
	constructor(country, city, street, houseNumber) {
		this.Country = country
		this.City = city
		this.Street = street
		this.HouseNumber = houseNumber
	}
	get Country() {
		return this.#country
	}
	set Country(newCountry) {
		if (!newCountry) throw new Error("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–≤—ñ–¥ –∫—Ä–∞—ó–Ω–∏")
		this.#country = newCountry
	}
	get City() {
		return this.#city
	}
	set City(newCity) {
		if (!newCity) throw new Error("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–≤—ñ–¥ –º—ñ—Å—Ç–∞")
		this.#city = newCity
	}
	get Street() {
		return this.#street
	}
	set Street(newStreet) {
		if (!newStreet) throw new Error("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–≤—ñ–¥ –≤—É–ª–∏—Ü—ñ")
		this.#street = newStreet
	}
	get HouseNumber() {
		return this.#houseNumber
	}
	set HouseNumber(newHouseNumber) {
		checkNaturalNumber(newHouseNumber, "–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É")
		this.#houseNumber = newHouseNumber
	}
	toString() {
		return `–ê–¥—Ä–µ—Å–∞ - ${this.Country}, ${this.City}, ${this.Street}, ${this.HouseNumber} <br>`
	}
}

class Firm {
	#name
	constructor(name, foundationDate, service, branchAddress) {
		branchAddress
		this.Name = name
		this.foundationDate = foundationDate
		this.service = service
		this.branchAddress = branchAddress
	}
	get Name() {
		return this.#name
	}
	set Name(newName) {
		if (!newName) throw new Error("–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –Ω–∞–∑–≤–∞ –§—ñ—Ä–º–∏")
		this.#name = newName
	}

	getFirmYears() {
		const presentDate = {
			month: 4,
			year: 2025
		}
		let firmYears = presentDate.year - this.foundationDate.Year

		if (presentDate.month < this.foundationDate.Month) firmYears--

		return firmYears
	}

	getBranchesInCity(cityName) {
		let res = ""
		this.branchAddress.forEach(el => el.City === cityName ? res += el.toString() : null)
		return res
	}

	getAvailableServices(maxPrice, maxDeadline) {
		let res = ""
		this.service.forEach(el => el.Price <= maxPrice && el.Deadline <= maxDeadline ? res += el.toString() : null)
		return res
	}
}

try {
	const foundationDate = new FoundationDate(2021, 2)
	const servicesList = [
		new Service("Service-1", 245, 10),
		new Service("Service-2", 3456, 100),
		new Service("Service-3", 765, 20),
	]
	const branchAddresses = [
		new BranchAddress("–ö—Ä–∞—ó–Ω–∞-1", "–ú—ñ—Å—Ç–æ-1", "–í—É–ª–∏—Ü—è-1", 23),
		new BranchAddress("–ö—Ä–∞—ó–Ω–∞-2", "–ú—ñ—Å—Ç–æ-2", "–í—É–ª–∏—Ü—è-2", 3),
		new BranchAddress("–ö—Ä–∞—ó–Ω–∞-3", "–ú—ñ—Å—Ç–æ-3", "–í—É–ª–∏—Ü—è-3", 5)
	]
	const someFirm = new Firm("Firm Name", foundationDate, servicesList, branchAddresses)
	document.write(`<p>–§—ñ—Ä–º—ñ —ñ—Å–Ω—É—î ${someFirm.getFirmYears()} —Ä–æ–∫–∏</p>`)
	document.write(`<p>${someFirm.getBranchesInCity("–ú—ñ—Å—Ç–æ-3")}</p>`)
	document.write(`<p>${someFirm.getAvailableServices(4000, 100)}</p>`)
} catch (error) {
	document.write(error)
}




// –¶—ñ —Ç–µ—Å—Ç–∏ –∑–≥–µ–Ω–µ—Ä—É–≤–∞–≤ —á–∞—ÇGPT
function runFirmTests() {
	console.log("üè¢ –¢–µ—Å—Ç–∏ –¥–ª—è –∫–ª–∞—Å—É Firm —Ç–∞ –¥–æ–ø–æ–º—ñ–∂–Ω–∏—Ö –∫–ª–∞—Å—ñ–≤");

	// 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ—ñ—Ä–º–∏
	let firm;
	try {
		const foundationDate = new FoundationDate(2015, 5);
		const services = [
			new Service("–†–æ–∑—Ä–æ–±–∫–∞ —Å–∞–π—Ç—É", 1000, 10),
			new Service("SEO –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è", 500, 5),
			new Service("UX –∞—É–¥–∏—Ç", 300, 3)
		];
		const branches = [
			new BranchAddress("–£–∫—Ä–∞—ó–Ω–∞", "–ö–∏—ó–≤", "–•—Ä–µ—â–∞—Ç–∏–∫", 10),
			new BranchAddress("–£–∫—Ä–∞—ó–Ω–∞", "–û–¥–µ—Å–∞", "–î–µ—Ä–∏–±–∞—Å—ñ–≤—Å—å–∫–∞", 5),
			new BranchAddress("–ü–æ–ª—å—â–∞", "–í–∞—Ä—à–∞–≤–∞", "–ú–∞—Ä—à–∞–ª–∫–æ–≤—Å—å–∫–∞", 12)
		];
		firm = new Firm("DigitalStudio", foundationDate, services, branches);
		console.log("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ—ñ—Ä–º–∏ —É—Å–ø—ñ—à–Ω–µ");
	} catch (err) {
		console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ñ—ñ—Ä–º–∏:", err.message);
	}

	// 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∫—ñ–≤ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ñ—ñ—Ä–º–∏
	try {
		const years = firm.getFirmYears();
		console.assert(years === 9, `‚ùå –û—á—ñ–∫—É–≤–∞–ª–æ—Å—è 9 —Ä–æ–∫—ñ–≤, –æ—Ç—Ä–∏–º–∞–Ω–æ ${years}`);
		console.log("‚úÖ –¢–µ—Å—Ç –Ω–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —Ä–æ–∫—ñ–≤ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –ø—Ä–æ–π–¥–µ–Ω–æ");
	} catch (err) {
		console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—á–∏—Å–ª–µ–Ω–Ω—ñ —Ä–æ–∫—ñ–≤:", err.message);
	}

	// 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ—ñ–ª—ñ–∞–ª—ñ–≤ —É –º—ñ—Å—Ç—ñ "–ö–∏—ó–≤"
	console.log("üìç –§—ñ–ª—ñ–∞–ª–∏ —É –º—ñ—Å—Ç—ñ '–ö–∏—ó–≤':");
	const kyivBranches = firm.branchAddress.filter(b => b.City === "–ö–∏—ó–≤");
	if (kyivBranches.length === 1) {
		console.log("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ—ñ–ª—ñ–∞–ª —É –ö–∏—î–≤—ñ:");
		console.log(kyivBranches[0].toString());
	} else {
		console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É —Ñ—ñ–ª—ñ–∞–ª—ñ–≤ —É –ö–∏—î–≤—ñ");
	}

	// 4. –ü–æ—Å–ª—É–≥–∏ –∑–∞ –±—é–¥–∂–µ—Ç–æ–º –¥–æ 500 —Ç–∞ —Ç–µ—Ä–º—ñ–Ω–æ–º –¥–æ 5 –¥–Ω—ñ–≤
	console.log("üíº –î–æ—Å—Ç—É–ø–Ω—ñ –ø–æ—Å–ª—É–≥–∏ –¥–æ 500‚Ç¥ —Ç–∞ –¥–æ 5 –¥–Ω—ñ–≤:");
	const available = firm.service.filter(s => s.Price <= 500 && s.Deadline <= 5);
	if (available.length === 2) {
		console.log("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª—É–≥–∏:");
		available.forEach(s => console.log(s.toString()));
	} else {
		console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –ø–æ—Å–ª—É–≥");
	}

	// 5. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–º–∏–ª–æ–∫: –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –¥–∞—Ç–∞
	try {
		new FoundationDate(2025, 13);
		console.error("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –º—ñ—Å—è—Ü—å –Ω–µ –≤–∏–∫–ª–∏–∫–∞–≤ –ø–æ–º–∏–ª–∫—É");
	} catch {
		console.log("‚úÖ –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –º—ñ—Å—è—Ü—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∏–∫–ª–∏–∫–∞–≤ –ø–æ–º–∏–ª–∫—É");
	}

	// 6. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–º–∏–ª–æ–∫: –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Ü—ñ–Ω–∞ –ø–æ—Å–ª—É–≥–∏
	try {
		new Service("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –ø–æ—Å–ª—É–≥–∞", -100, 3);
		console.error("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Ü—ñ–Ω–∞ –Ω–µ –≤–∏–∫–ª–∏–∫–∞–ª–∞ –ø–æ–º–∏–ª–∫—É");
	} catch {
		console.log("‚úÖ –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Ü—ñ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∏–∫–ª–∏–∫–∞–ª–∞ –ø–æ–º–∏–ª–∫—É");
	}

	// 7. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–º–∏–ª–æ–∫: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –∞–¥—Ä–µ—Å–∞
	try {
		new BranchAddress("–£–∫—Ä–∞—ó–Ω–∞", "", "–ì–æ–ª–æ–≤–Ω–∞", 1);
		console.error("‚ùå –ü–æ—Ä–æ–∂–Ω—î –º—ñ—Å—Ç–æ –Ω–µ –≤–∏–∫–ª–∏–∫–∞–ª–æ –ø–æ–º–∏–ª–∫—É");
	} catch {
		console.log("‚úÖ –ü–æ—Ä–æ–∂–Ω—î –º—ñ—Å—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∏–∫–ª–∏–∫–∞–ª–æ –ø–æ–º–∏–ª–∫—É");
	}

	console.log("üéØ –£—Å—ñ —Ç–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
}
runFirmTests()

