"use strict"

// –ó–∞–¥–∞—á–∞ 04. –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞—Å TBankomat, —è–∫–∏–π –º–æ–¥–µ–ª—é—î —Ä–æ–±–æ—Ç—É –±–∞–Ω–∫–æ–º–∞—Ç–∞. –ö–ª–∞—Å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –ø–æ–ª—è –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫—É–ø—é—Ä –∫–æ–∂–Ω–æ–≥–æ —ñ–∑ –Ω–æ–º—ñ–Ω–∞–ª—ñ–≤ –≤—ñ–¥ 5 –¥–æ 200 –≥—Ä–∏–≤–µ–Ω—å. –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –º–µ—Ç–æ–¥–∏ –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó —Ç–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó —Å—É–º, —è–∫—ñ –º–æ–∂–µ –≤–∏–¥–∞—Ç–∏ –±–∞–Ω–∫–æ–º–∞—Ç, —Ç–∞ –º–µ—Ç–æ–¥ –∑–Ω—è—Ç—Ç—è –¥–µ—è–∫–æ—ó —Å—É–º–∏.


function checkNaturalNumber(value, message) {
	if (value <= 0 || isNaN(value) || typeof (value) !== "number") throw new Error(message)
}

class Banknote {
	#banknote
	#amount
	constructor(banknote, amount) {
		this.banknote = banknote
		this.amount = amount
	}
	get banknote() {
		return this.#banknote
	}
	set banknote(newBanknote) {
		checkNaturalNumber(newBanknote, "–ù–µ–≤—ñ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–∏–π –Ω–æ–º—ñ–Ω–∞–ª –±–∞–Ω–∫–Ω–æ—Ç–∏")
		this.#banknote = newBanknote
	}
	get amount() {
		return this.#amount
	}
	set amount(newAmount) {
		checkNaturalNumber(newAmount, "–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—É–ø—é—Ä")
		this.#amount = newAmount
	}
}

class TBankomat {
	constructor(banknotesList) {
		this.banknotesList = banknotesList
	}

	getMaxAvailableSum() {
		const sum = this.banknotesList.reduce((prevSum, el) => prevSum + (el.banknote * el.amount), 0)
		return sum
	}

	getMinAvailableSum() {
		let amountList = []
		for (let el of this.banknotesList) {
			if (el.amount) {
				amountList.push(el.banknote)
			}
		}

		const minSum = Math.min(...amountList)

		return minSum
	}

	withdrawMoney(moneyAmount) {
		if (moneyAmount > this.getMaxAvailableSum()) throw new Error("–í –±–∞–Ω–∫–æ–º–∞—Ç—ñ –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î –∫—É–ø—é—Ä")
		
		const sortList = this.banknotesList.slice().sort((a, b) => b.banknote - a.banknote)

		let result = {}

		while (moneyAmount > 0) {
			for (let el of sortList) {
				if (el.amount) {
					const banknoteAmountNeed = Math.floor(moneyAmount / el.banknote)
					const banknoteAmountTake = Math.min(banknoteAmountNeed, el.amount)

					if (banknoteAmountTake > 0) {
						moneyAmount = moneyAmount - (banknoteAmountTake * el.banknote)
						// –∑–±–µ—Ä—ñ–≥–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫—ñ–ª—å–∫–∏ –≤–∏–¥–∞–Ω–æ —è–∫–∏—Ö –∫—É–ø—é—Ä
						result[el.banknote] = banknoteAmountTake

						el.amount -= banknoteAmountTake;
					}
				}
			}
		}
		return result
	}
}

const banknotesList = [
	new Banknote(5, 5),
	new Banknote(10, 5),
	new Banknote(20, 5),
	new Banknote(50, 5),
	new Banknote(100, 5),
	new Banknote(200, 5)
]

const atm = new TBankomat(banknotesList)

console.log("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Å—É–º–∞:", atm.getMaxAvailableSum()) 
console.log("–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞:", atm.getMinAvailableSum())

console.log("–ó–Ω—è—Ç—Ç—è 385 –≥—Ä–Ω:")
console.log(atm.withdrawMoney(385))
console.log(banknotesList)



// –¶—ñ —Ç–µ—Å—Ç–∏ –∑–≥–µ–Ω–µ—Ä—É–≤–∞–≤ —á–∞—ÇGPT
function runTests() {
	console.log("üîç –¢–µ—Å—Ç–∏ –¥–ª—è –∫–ª–∞—Å—ñ–≤ TBankomat —Ç–∞ Banknote");

	// –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∫—É–ø—é—Ä
	const banknotes = [
		new Banknote(5, 5),    // 25
		new Banknote(10, 5),   // 50
		new Banknote(20, 5),   // 100
		new Banknote(50, 5),   // 250
		new Banknote(100, 5),  // 500
		new Banknote(200, 5)   // 1000
	];
	const atm = new TBankomat(banknotes);

	// –¢–µ—Å—Ç 1: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Å—É–º–∞
	const maxSum = atm.getMaxAvailableSum();
	console.assert(maxSum === 1925, `‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ getMaxAvailableSum. –û—á—ñ–∫—É–≤–∞–ª–æ—Å—è 1925, –æ—Ç—Ä–∏–º–∞–Ω–æ ${maxSum}`);

	// –¢–µ—Å—Ç 2: –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞
	const minSum = atm.getMinAvailableSum();
	console.assert(minSum === 5, `‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ getMinAvailableSum. –û—á—ñ–∫—É–≤–∞–ª–æ—Å—è 5, –æ—Ç—Ä–∏–º–∞–Ω–æ ${minSum}`);

	// –¢–µ—Å—Ç 3: –£—Å–ø—ñ—à–Ω–µ –∑–Ω—è—Ç—Ç—è
	const result = atm.withdrawMoney(385);
	const expected = { 200: 1, 100: 1, 50: 1, 20: 1, 10: 1, 5: 1 };
	console.assert(JSON.stringify(result) === JSON.stringify(expected), `‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–Ω—è—Ç—Ç—ñ 385. –û—Ç—Ä–∏–º–∞–Ω–æ: ${JSON.stringify(result)}`);

	// –¢–µ—Å—Ç 4: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–Ω—è—Ç—Ç—ñ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–æ—ó —Å—É–º–∏
	let errorCaught = false;
	try {
		atm.withdrawMoney(9999);
	} catch (err) {
		errorCaught = true;
	}
	console.assert(errorCaught, "‚ùå –û—á—ñ–∫—É–≤–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–Ω—è—Ç—Ç—ñ —Å—É–º–∏, –±—ñ–ª—å—à–æ—ó –∑–∞ –Ω–∞—è–≤–Ω—É");

	// –¢–µ—Å—Ç 5: –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º—ñ–Ω–∞–ª
	try {
		new Banknote(-10, 5);
		console.error("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º—ñ–Ω–∞–ª –Ω–µ –≤–∏–∫–ª–∏–∫–∞–≤ –≤–∏–Ω—è—Ç–∫—É");
	} catch (e) {
		console.log("‚úÖ –¢–µ—Å—Ç –Ω–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º—ñ–Ω–∞–ª –ø—Ä–æ–π–¥–µ–Ω–æ");
	}

	// –¢–µ—Å—Ç 6: –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—É–ø—é—Ä
	try {
		new Banknote(10, -5);
		console.error("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—É–ø—é—Ä –Ω–µ –≤–∏–∫–ª–∏–∫–∞–ª–∞ –≤–∏–Ω—è—Ç–∫—É");
	} catch (e) {
		console.log("‚úÖ –¢–µ—Å—Ç –Ω–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—É–ø—é—Ä –ø—Ä–æ–π–¥–µ–Ω–æ");
	}

	console.log("‚úÖ –£—Å—ñ —Ç–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
}
runTests()